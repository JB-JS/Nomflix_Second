{"version":3,"sources":["api.js","components/Loader.js","components/Message.js","assets/noPosterSmall.png","components/Poster.js","components/Section.js","Routes/Home/HomePresenter.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","components/Header.js","Router.js","components/GlobalStyles.js","components/App.js","index.js"],"names":["api","axios","create","baseURL","params","api_key","language","moviesApi","id","get","append_to_response","term","query","tvApi","Loaded","keyframes","Container","styled","div","Loading","Svg","svg","Loader","cx","cy","r","Text","span","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Title","Year","Poster","imageUrl","title","rating","year","isMovie","to","noPosterSmall","role","aria-label","Grid","Section","children","HomePresenter","movies","nowPlaying","popular","upcoming","loading","error","Helmet","length","map","movie","poster_path","vote_average","release_date","substring","propTyeps","PropTypes","object","bool","isRequired","string","TVPresenter","TV","topRated","airingToday","show","name","first_air_date","TVContainer","useState","ariringToday","setTV","setLoading","setError","useEffect","Promise","all","then","datas","data","results","Backdrop","bgImage","Content","Cover","Data","ItemSection","ItemContainer","Item","Divider","Overview","p","ItemSectionTitle","h2","fontSize","VideoItemContainer","VideoItem","ItemTabs","ItemTab","Link","$current","ItemContent","width","height","DetailPresenter","result","pathname","url","Object","keys","backdrop_path","runtime","episode_run_time","genres","genre","index","overview","console","log","videos","video","src","key","frameBorder","allow","allowFullScreen","style","marginTop","lineHeight","seasons","season","display","justifyContent","air_date","production_companies","alignItems","companie","logo_path","alt","production_countries","countrie","idx","iso_3166_1","created_by","created","profile_path","DetailContainer","match","location","push","history","setResult","includes","parsedId","parseInt","isNaN","a","fetchResult","Form","form","Input","input","SearchPresenter","movieResults","tvResults","onSubmit","onChange","searchTerm","placeholder","value","SearchContainer","setSearchTerm","searchByTerm","e","preventDefault","target","Header","header","List","ul","li","current","SLink","withRouter","Router","path","exact","component","Detail","Search","from","GlobalStyles","createGlobalStyle","reset","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ac8205a.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '75e2f509822ffcb4ae81e278d706af54',\n    language: 'ko',\n  },\n})\n\nexport const moviesApi = {\n  nowPlaying: () => api.get('movie/now_playing'),\n  upcoming: () => api.get('movie/upcoming'),\n  popular: () => api.get('movie/popular'),\n  movieDetail: (id) =>\n    api.get(`movie/${id}`, {\n      params: {\n        append_to_response: 'videos',\n      },\n    }),\n  search: (term) =>\n    api.get('search/movie', {\n      params: {\n        query: term,\n      },\n    }),\n}\n\nexport const tvApi = {\n  topRated: () => api.get('tv/top_rated'),\n  popular: () => api.get('tv/popular'),\n  airingToday: () => api.get('tv/airing_today'),\n  tvDetail: (id) =>\n    api.get(`tv/${id}`, {\n      params: {\n        append_to_response: 'videos',\n      },\n    }),\n  search: (term) =>\n    api.get('search/tv', {\n      params: {\n        query: term,\n      },\n    }),\n}\n","import styled, { keyframes } from 'styled-components'\n\nconst Loaded = keyframes`\n  0% {\n    transform: rotate(0deg)\n  }\n\n  100% {\n    transform: rotate(360deg)\n  }\n\n`\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: calc(100vh - 50px);\n`\n\nconst Loading = styled.div`\n  position: relative;\n  border: 3px solid rgb(50, 50, 50);\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n`\n\nconst Svg = styled.svg`\n  position: absolute;\n  top: -4px;\n  left: -4px;\n  width: 60px;\n  height: 60px;\n  fill: transparent;\n  stroke: rgb(129, 107, 255);\n  stroke-width: 4px;\n  stroke-dasharray: calc(29 * 3.14);\n  transform: rotate(-90deg);\n  animation: 1s ${Loaded} infinite forwards;\n`\n\nconst Loader = () => (\n  <Container>\n    <Loading>\n      <Svg>\n        <circle cx=\"30\" cy=\"30\" r=\"29\"></circle>\n      </Svg>\n    </Loading>\n  </Container>\n)\n\nexport default Loader\n","import styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100vw;\n`\n\nconst Text = styled.span`\n  color: ${(props) => props.color};\n`\n\nconst Message = ({ text, color }) => (\n  <Container>\n    <Text color={color}>{text}</Text>\n  </Container>\n)\n\nMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n}\n\nexport default Message\n","export default __webpack_public_path__ + \"static/media/noPosterSmall.ea2ad102.png\";","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport noPosterSmall from '../assets/noPosterSmall.png'\n\nconst Container = styled.div``\n\nconst Image = styled.div`\n  height: 180px;\n  background: url(${(props) => props.bgUrl}) no-repeat center / cover;\n  transition: opacity 0.3s ease-in-out;\n`\n\nconst Rating = styled.span`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n  opacity: 0;\n`\n\nconst ImageContainer = styled.div`\n  position: relative;\n  margin-bottom: 15px;\n  &:hover {\n    ${Image} {\n      opacity: 0.3;\n    }\n    ${Rating} {\n      opacity: 1;\n    }\n  }\n`\n\nconst Title = styled.div`\n  margin-bottom: 5px;\n`\n\nconst Year = styled.span`\n  font-size: 8px;\n`\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => {\n  return (\n    <Link to={isMovie ? `/movie/${id}` : `/tv/${id}`}>\n      <Container>\n        <ImageContainer>\n          <Image\n            bgUrl={\n              imageUrl\n                ? `https://image.tmdb.org/t/p/w500${imageUrl}`\n                : noPosterSmall\n            }\n          />\n          <Rating>\n            <span role=\"img\" aria-label=\"rating\">\n              ⭐️\n            </span>\n            {rating}/10\n          </Rating>\n        </ImageContainer>\n        <Title>{title}</Title>\n        <Year>{year} </Year>\n      </Container>\n    </Link>\n  )\n}\n\nPoster.propTypes = {\n  id: PropTypes.number.isRequired,\n  imageUrl: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  rating: PropTypes.number,\n  year: PropTypes.string,\n  isMovie: PropTypes.bool,\n}\n\nexport default Poster\n","import styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst Container = styled.div`\n  :not(:last-child) {\n    margin-bottom: 50px;\n  }\n`\n\nconst Title = styled.span`\n  font-size: 14px;\n  font-weight: 600;\n`\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 125px);\n  margin-top: 25px;\n  grid-gap: 25px;\n`\n\nconst Section = ({ title, children }) => {\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <Grid>{children}</Grid>\n    </Container>\n  )\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n}\n\nexport default Section\n","import PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Poster from '../../components/Poster'\nimport Section from '../../components/Section'\n\nconst Container = styled.div`\n  padding: 20px;\n`\n\nconst HomePresenter = ({\n  movies: { nowPlaying, popular, upcoming },\n  loading,\n  error,\n}) => (\n  <>\n    <Helmet>\n      <title>Movies - 영화 제공 서비스 Nomflix</title>\n    </Helmet>\n\n    {loading ? (\n      <Loader />\n    ) : (\n      <Container>\n        {nowPlaying && nowPlaying.length > 0 && (\n          <Section title=\"Now Playing\">\n            {nowPlaying.map((movie) => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                year={movie.release_date && movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {popular && popular.length > 0 && (\n          <Section title=\"Popular Movies\">\n            {popular.map((movie) => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                year={movie.release_date && movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {upcoming && upcoming.length > 0 && (\n          <Section title=\"Upcoming Movies\">\n            {upcoming.map((movie) => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                year={movie.release_date && movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {error && <Message text={error} color=\"rgb(233, 30, 0)\" />}\n      </Container>\n    )}\n  </>\n)\n\nHomePresenter.propTyeps = {\n  movies: PropTypes.object,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n}\n\nexport default HomePresenter\n","import PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport styled from 'styled-components'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Poster from '../../components/Poster'\nimport Section from '../../components/Section'\n\nconst Container = styled.div`\n  padding: 20px;\n`\n\nconst TVPresenter = ({\n  TV: { topRated, popular, airingToday },\n  loading,\n  error,\n}) => (\n  <>\n    <Helmet>\n      <title>TV Shows - 영화 제공 서비스 NomFlix</title>\n    </Helmet>\n    {loading ? (\n      <Loader />\n    ) : (\n      <Container>\n        {topRated && topRated.length > 0 && (\n          <Section title=\"Top Rated Shows\">\n            {topRated.map((show) => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                title={show.name}\n                imageUrl={show.poster_path}\n                rating={show.vote_average}\n                year={\n                  show.first_air_date && show.first_air_date.substring(0, 4)\n                }\n              />\n            ))}\n          </Section>\n        )}\n        {popular && popular.length > 0 && (\n          <Section title=\"Popular Shows\">\n            {popular.map((show) => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                title={show.name}\n                imageUrl={show.poster_path}\n                rating={show.vote_average}\n                year={\n                  show.first_air_date && show.first_air_date.substring(0, 4)\n                }\n              />\n            ))}\n          </Section>\n        )}\n        {airingToday && airingToday.length > 0 && (\n          <Section title=\"Airing Today\">\n            {airingToday.map((show) => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                title={show.name}\n                imageUrl={show.poster_path}\n                rating={show.vote_average}\n                year={\n                  show.first_air_date && show.first_air_date.substring(0, 4)\n                }\n              />\n            ))}\n          </Section>\n        )}\n        {error && <Message text={error} color=\"rgb(233, 30, 0)\" />}\n      </Container>\n    )}\n  </>\n)\n\nTVPresenter.propTyeps = {\n  TV: PropTypes.object,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n}\n\nexport default TVPresenter\n","import TVContainer from './TVContainer'\n\nexport default TVContainer\n","import { useEffect, useState } from 'react'\nimport { tvApi } from '../../api'\nimport TVPresenter from './TVPresenter'\n\nconst TVContainer = () => {\n  const [TV, setTV] = useState({\n    topRated: null,\n    popular: null,\n    ariringToday: null,\n  })\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  // componentDidMount\n  useEffect(() => {\n    try {\n      Promise.all([\n        tvApi.topRated(),\n        tvApi.popular(),\n        tvApi.airingToday(),\n      ]).then((datas) => {\n        const [\n          {\n            data: { results: topRated },\n          },\n          {\n            data: { results: popular },\n          },\n          {\n            data: { results: airingToday },\n          },\n        ] = datas\n\n        setTV({\n          topRated,\n          popular,\n          airingToday,\n        })\n      })\n    } catch (error) {\n      setError(\"Can't find movie information\")\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  return <TVPresenter TV={TV} loading={loading} error={error} />\n}\n\nexport default TVContainer\n","import PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport noPosterSmall from '../../assets/noPosterSmall.png'\nimport { Helmet } from 'react-helmet'\nimport { Link } from 'react-router-dom'\n\nconst Container = styled.div`\n  position: relative;\n  min-height: calc(100vh - 50px);\n  padding: 50px;\n`\n\nconst Backdrop = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background: url(${(props) => props.bgImage}) no-repeat center / cover;\n  height: 100%;\n  &::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background: rgba(20, 20, 20, 0.7);\n  }\n`\n\nconst Content = styled.div`\n  position: relative;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n`\n\nconst Cover = styled.div`\n  width: 30%;\n  background: url(${(props) => props.bgImage}) no-repeat center / cover;\n`\n\nconst Data = styled.div`\n  width: 70%;\n  margin-left: 2.5rem;\n`\n\nconst ItemSection = styled.div`\n  margin: 1.5rem 0;\n`\n\nconst ItemContainer = styled.div`\n  margin: 1.25rem 0;\n`\n\nconst Item = styled.span``\n\nconst Divider = styled.span`\n  margin: 0 10px;\n`\n\nconst Overview = styled.p`\n  width: 50%;\n  opacity: 0.7;\n  line-height: 1.5;\n  font-size: 12px;\n  text-align: justify;\n`\n\nconst ItemSectionTitle = styled.h2`\n  margin-bottom: 1.25rem;\n  font-size: ${(props) => (props.fontSize ? props.fontSize : '2.5rem')};\n`\n\nconst VideoItemContainer = styled.div`\n  display: inline-flex;\n  max-width: 100%;\n  padding: 1.25rem;\n  background: rgba(255, 255, 255, 0.4);\n  overflow: scroll;\n`\n\nconst VideoItem = styled.div`\n  width: 300px;\n  & + div {\n    margin-left: 1.25rem;\n  }\n`\n\nconst ItemTabs = styled.div`\n  margin-bottom: 2rem;\n  font-size: 1rem;\n`\n\nconst ItemTab = styled(Link)`\n  padding: 0 0.5rem 0.5rem;\n  border-bottom: ${(props) =>\n    props.$current ? '4px solid rgb(129, 107, 255)' : 'transparent'};\n  color: ${(props) => (props.$current ? 'rgb(129, 107, 255)' : '#fff')};\n`\n\nconst ItemContent = styled.div`\n  & + div {\n    margin-left: 1.25rem;\n  }\n`\n\nconst Image = styled.div`\n  width: ${(props) => (props.width ? props.width : '250px')};\n  height: ${(props) => (props.height ? props.height : '350px')};\n  background: url(${(props) => props.bgImage}) no-repeat center / cover;\n  margin-bottom: 1rem;\n`\n\nconst DetailPresenter = ({ result, loading, error, id, pathname, url }) =>\n  loading ? (\n    <>\n      <Helmet>\n        <title>Loading - 영화 제공 서비스 Nomflix</title>\n      </Helmet>\n      <Loader />\n    </>\n  ) : (\n    <>\n      <Helmet>\n        <title>\n          {error\n            ? 'Not Found - 영화 제공 서비스 Nomflix'\n            : `${\n                result.title ? result.title : result.name\n              } - 영화 제공 서비스 Nomflix`}\n        </title>\n      </Helmet>\n      <Container>\n        {error ? (\n          <Message text={error} color=\"rgb(233, 30, 0)\" />\n        ) : (\n          result &&\n          Object.keys(result).length > 0 && (\n            <>\n              <Backdrop\n                bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\n              />\n\n              <Content>\n                <Cover\n                  bgImage={\n                    result.poster_path\n                      ? `https://image.tmdb.org/t/p/original${result.poster_path}`\n                      : noPosterSmall\n                  }\n                />\n                <Data>\n                  <ItemSectionTitle>\n                    {result.title ? result.title : result.name}\n                  </ItemSectionTitle>\n                  <ItemContainer>\n                    <Item>\n                      {result.release_date\n                        ? result.release_date.substring(0, 4)\n                        : result.first_air_date.substring(0, 4)}\n                    </Item>\n                    <Divider>•</Divider>\n                    <Item>\n                      {result.runtime\n                        ? result.runtime\n                        : result.episode_run_time}{' '}\n                      min\n                    </Item>\n                    <Divider>•</Divider>\n                    <Item>\n                      {result.genres.map((genre, index, genres) =>\n                        index === genres.length - 1\n                          ? genre.name\n                          : `${genre.name} / `\n                      )}\n                    </Item>\n                  </ItemContainer>\n                  <Overview>{result.overview}</Overview>\n                  {console.log(result)}\n\n                  {result.videos.results.length > 0 && (\n                    <ItemSection>\n                      <ItemSectionTitle fontSize=\"1.5rem\">\n                        Videos\n                      </ItemSectionTitle>\n                      <VideoItemContainer>\n                        {result.videos.results.map((video) => (\n                          <VideoItem key={video.id}>\n                            <iframe\n                              src={`https://www.youtube.com/embed/${video.key}`}\n                              title=\"YouTube video player\"\n                              frameBorder=\"0\"\n                              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                              allowFullScreen\n                            ></iframe>\n                            <p style={{ marginTop: '1rem', lineHeight: '1.5' }}>\n                              {video.name}\n                            </p>\n                          </VideoItem>\n                        ))}\n                      </VideoItemContainer>\n                    </ItemSection>\n                  )}\n\n                  <ItemSection>\n                    <ItemTabs>\n                      <ItemTab\n                        $current={\n                          `/tv/${id}` === pathname ||\n                          `/movie/${id}` === pathname\n                        }\n                        to={`${url}`}\n                      >\n                        시즌\n                      </ItemTab>\n                      <ItemTab\n                        $current={pathname === `${url}/company`}\n                        to={`${url}/company`}\n                      >\n                        제작사\n                      </ItemTab>\n                      <ItemTab\n                        $current={pathname === `${url}/countries`}\n                        to={`${url}/countries`}\n                      >\n                        제조국\n                      </ItemTab>\n                      <ItemTab\n                        $current={pathname === `${url}/creator`}\n                        to={`${url}/creator`}\n                      >\n                        제작자\n                      </ItemTab>\n                    </ItemTabs>\n\n                    {pathname === `${url}` &&\n                      result.seasons &&\n                      result.seasons.length > 0 && (\n                        <VideoItemContainer>\n                          {result.seasons.map((season) => (\n                            <ItemContent key={season.id}>\n                              <Image\n                                bgImage={\n                                  season.poster_path\n                                    ? `https://image.tmdb.org/t/p/original${season.poster_path}`\n                                    : noPosterSmall\n                                }\n                              ></Image>\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  justifyContent: 'space-between',\n                                  marginTop: '1rem',\n                                }}\n                              >\n                                <span>{season.name}</span>\n                                <span>{season.air_date}</span>\n                              </div>\n                            </ItemContent>\n                          ))}\n                        </VideoItemContainer>\n                      )}\n\n                    {pathname === `${url}/company` &&\n                      result.production_companies &&\n                      result.production_companies.length > 0 && (\n                        <VideoItemContainer style={{ alignItems: 'center' }}>\n                          {result.production_companies.map((companie) => (\n                            <ItemContent key={companie.id}>\n                              <img\n                                src={\n                                  companie.logo_path\n                                    ? `https://image.tmdb.org/t/p/w200/${companie.logo_path}`\n                                    : noPosterSmall\n                                }\n                                alt={companie.name}\n                              />\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  justifyContent: 'space-between',\n                                  marginTop: '1rem',\n                                }}\n                              >\n                                <span>{companie.name}</span>\n                              </div>\n                            </ItemContent>\n                          ))}\n                        </VideoItemContainer>\n                      )}\n\n                    {pathname === `${url}/countries` &&\n                      result.production_countries &&\n                      result.production_countries.length > 0 && (\n                        <VideoItemContainer>\n                          {result.production_countries.map((countrie, idx) => (\n                            <ItemContent key={idx}>\n                              <img\n                                src={\n                                  countrie.iso_3166_1\n                                    ? `https://www.countryflags.io/${countrie.iso_3166_1}/flat/64.png`\n                                    : noPosterSmall\n                                }\n                                alt={countrie.name}\n                              />\n\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  justifyContent: 'space-between',\n                                  marginTop: '1rem',\n                                }}\n                              >\n                                <span>{countrie.name}</span>\n                              </div>\n                            </ItemContent>\n                          ))}\n                        </VideoItemContainer>\n                      )}\n\n                    {pathname === `${url}/creator` &&\n                      result.created_by &&\n                      result.created_by.length > 0 && (\n                        <VideoItemContainer>\n                          {result.created_by.map((created) => (\n                            <ItemContent key={created.id}>\n                              <Image\n                                width=\"150px\"\n                                height=\"150px\"\n                                bgImage={\n                                  created.profile_path\n                                    ? `https://image.tmdb.org/t/p/original${created.profile_path}`\n                                    : noPosterSmall\n                                }\n                              ></Image>\n                              <p>{created.name}</p>\n                            </ItemContent>\n                          ))}\n                        </VideoItemContainer>\n                      )}\n                  </ItemSection>\n                </Data>\n              </Content>\n            </>\n          )\n        )}\n      </Container>\n    </>\n  )\n\nDetailPresenter.propTypes = {\n  result: PropTypes.object,\n  loading: PropTypes.bool.isRequired,\n  match: PropTypes.object,\n  error: PropTypes.string,\n}\n\nexport default DetailPresenter\n","import DetailContainer from './DetailContainer'\n\nexport default DetailContainer\n","import { useEffect, useState } from 'react'\n\nimport { moviesApi, tvApi } from '../../api'\nimport DetailPresenter from './DetailPresenter'\n\nconst DetailContainer = ({\n  match: {\n    params: { id },\n    url,\n  },\n  location: { pathname },\n\n  history: { push },\n}) => {\n  const [result, setResult] = useState({})\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [isMovie] = useState(pathname.includes('/movie/'))\n\n  useEffect(() => {\n    const parsedId = parseInt(id, 10)\n\n    if (isNaN(parsedId)) {\n      return push('/')\n    }\n\n    let result = {}\n\n    async function fetchResult() {\n      try {\n        if (isMovie) {\n          const a = await moviesApi.movieDetail(parsedId)\n          result = a.data\n        } else {\n          const a = await tvApi.tvDetail(parsedId)\n          result = a.data\n        }\n\n        setResult(result)\n        setLoading(false)\n      } catch (error) {\n        setError(\"Can't find anything\")\n        setLoading(false)\n      }\n    }\n\n    fetchResult()\n  }, [setResult, setLoading, push, id, isMovie])\n\n  return (\n    <DetailPresenter\n      result={result}\n      loading={loading}\n      error={error}\n      id={id}\n      pathname={pathname}\n      url={url}\n    />\n  )\n}\n\nexport default DetailContainer\n","import PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport styled from 'styled-components'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Poster from '../../components/Poster'\nimport Section from '../../components/Section'\n\nconst Container = styled.div`\n  padding: 20px;\n`\n\nconst Form = styled.form`\n  width: 100%;\n  margin-bottom: 50px;\n`\n\nconst Input = styled.input`\n  all: unset;\n  width: 100%;\n  font-size: 28px;\n`\n\nconst SearchPresenter = ({\n  result: { movieResults, tvResults },\n  onSubmit,\n  onChange,\n  searchTerm,\n  loading,\n  error,\n}) => (\n  <Container>\n    <Helmet>\n      <title>Search - 영화 제공 서비스 NomFlix</title>\n    </Helmet>\n    <Form onSubmit={onSubmit}>\n      <Input\n        onChange={onChange}\n        placeholder=\"Search Movies or TV Shows...\"\n        value={searchTerm}\n      />\n    </Form>\n    {loading ? (\n      <Loader />\n    ) : (\n      <>\n        {movieResults && movieResults.length > 0 && (\n          <Section title=\"Movie Results\">\n            {movieResults.map((movie) => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                year={movie.release_date && movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {tvResults && tvResults.length > 0 && (\n          <Section title=\"Tv Show Results\">\n            {tvResults.map((show) => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                title={show.name}\n                rating={show.vote_average}\n                imageUrl={show.poster_path}\n                year={\n                  show.first_air_date && show.first_air_date.substring(0, 4)\n                }\n              />\n            ))}\n          </Section>\n        )}\n        {error && <Message text={error} color=\"rgb(233, 30, 0)\" />}\n        {tvResults &&\n          movieResults &&\n          tvResults.length === 0 &&\n          movieResults.length === 0 && (\n            <Message text=\"Nothing Found\" color=\"rgb(255, 199, 100)\" />\n          )}\n      </>\n    )}\n  </Container>\n)\n\nSearchPresenter.propTypes = {\n  result: PropTypes.object,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n  searchTerm: PropTypes.string,\n}\n\nexport default SearchPresenter\n","import SearchContainer from './SearchContainer'\n\nexport default SearchContainer\n","import { useState } from 'react'\nimport { moviesApi, tvApi } from '../../api'\nimport SearchPresenter from './SearchPresenter'\n\nconst SearchContainer = () => {\n  const [result, setResult] = useState({\n    movieResults: null,\n    tvResults: null,\n  })\n  const [searchTerm, setSearchTerm] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const onSubmit = (e) => {\n    e.preventDefault()\n\n    if (searchTerm !== '') searchByTerm()\n  }\n\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e\n\n    setSearchTerm(value)\n  }\n\n  const searchByTerm = () => {\n    setLoading(true)\n    try {\n      Promise.all([\n        moviesApi.search(searchTerm),\n        tvApi.search(searchTerm),\n      ]).then((datas) => {\n        const [\n          {\n            data: { results: movieResults },\n          },\n          {\n            data: { results: tvResults },\n          },\n        ] = datas\n\n        setResult({\n          movieResults,\n          tvResults,\n        })\n      })\n    } catch {\n      setError(\"Can't find results\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <SearchPresenter\n      result={result}\n      onSubmit={onSubmit}\n      onChange={onChange}\n      searchTerm={searchTerm}\n      loading={loading}\n      error={error}\n    />\n  )\n}\n\nexport default SearchContainer\n","import { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst Header = styled.header`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 50px;\n  background-color: rgba(20, 20, 20, 0.8);\n  box-shadow: 0 1px 5px 2px rgba(0, 0, 0, 0.8);\n  color: white;\n  z-index: 10;\n`\n\nconst List = styled.ul`\n  display: flex;\n`\n\nconst Item = styled.li`\n  width: 80px;\n  height: 50px;\n  text-align: center;\n  color: ${(props) => (props.current ? 'rgb(127, 109, 255)' : '#fff')};\n  border-bottom: 4px solid\n    ${(props) => (props.current ? 'rgb(127, 109, 255)' : 'transparent')};\n  transition: border-bottom 0.5s ease-in-out;\n`\n\nconst SLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`\n\nexport default withRouter(({ location: { pathname } }) => (\n  <Header>\n    <List>\n      <Item current={pathname === '/'}>\n        <SLink to=\"/\">Movies</SLink>\n      </Item>\n      <Item current={pathname === '/tv'}>\n        <SLink to=\"/tv\">TV</SLink>\n      </Item>\n      <Item current={pathname === '/search'}>\n        <SLink to=\"/search\">Search</SLink>\n      </Item>\n    </List>\n  </Header>\n))\n","import { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\nimport Home from './Routes/Home'\nimport TV from './Routes/TV'\nimport Detail from './Routes/Detail'\nimport Search from './Routes/Search'\nimport Header from './components/Header'\n\nconst Router = () => (\n  <BrowserRouter>\n    <Header />\n\n    <Switch>\n      {/* <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/\"\n        exact\n        component={Home}\n      /> */}\n      <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/tv\"\n        exact\n        component={TV}\n      />\n      <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/movie/:id\"\n        component={Detail}\n      />\n      <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/tv/:id\"\n        component={Detail}\n      />\n      <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/search\"\n        component={Search}\n      />\n      <Redirect from=\"*\" to=\"/\" />\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Router\n","import { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\n\nconst GlobalStyles = createGlobalStyle`\n    ${reset};\n\n    *,\n    *::after,\n    *::before {\n        box-sizing: border-box;\n    }\n\n    a {\n        text-decoration: none;\n        color: inherit;\n    }\n\n    body{\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size:12px;\n        background-color:rgba(20, 20, 20, 1);\n        color:white;\n        padding-top:50px;\n    }\n`\n\nexport default GlobalStyles\n","import Router from '../Router'\nimport GlobalStyles from './GlobalStyles'\n\nfunction App() {\n  return (\n    <>\n      <Router />\n      <GlobalStyles />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}