{"version":3,"sources":["api.js","components/Loader.js","components/Message.js","assets/noPosterSmall.png","components/Poster.js","components/Section.js","Routes/Home/HomePresenter.js","Routes/TV/TVPresenter.js","Routes/Detail/DetailPresenter.js","Routes/Search/SearchPresenter.js","components/Header.js","Router.js","components/GlobalStyles.js","components/App.js","index.js"],"names":["axios","create","baseURL","params","api_key","language","Loaded","keyframes","Container","styled","div","Loading","Svg","svg","Loader","cx","cy","r","Text","span","props","color","Message","text","Image","bgUrl","Rating","ImageContainer","Title","Year","Poster","id","imageUrl","title","rating","year","isMovie","to","noPosterSmall","role","aria-label","Grid","Section","children","HomePresenter","movies","nowPlaying","popular","upcoming","loading","error","Helmet","length","map","movie","poster_path","vote_average","release_date","substring","propTyeps","PropTypes","object","bool","isRequired","string","TVPresenter","TV","topRated","airingToday","show","name","first_air_date","bgImage","p","h2","fontSize","Link","$current","width","height","form","input","Header","header","List","ul","Item","li","current","SLink","withRouter","pathname","location","Router","GlobalStyles","createGlobalStyle","reset","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3fbdf78.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '75e2f509822ffcb4ae81e278d706af54',\n    language: 'ko',\n  },\n})\n\nexport const moviesApi = {\n  nowPlaying: () => api.get('movie/now_playing'),\n  upcoming: () => api.get('movie/upcoming'),\n  popular: () => api.get('movie/popular'),\n  movieDetail: (id) =>\n    api.get(`movie/${id}`, {\n      params: {\n        append_to_response: 'videos',\n      },\n    }),\n  search: (term) =>\n    api.get('search/movie', {\n      params: {\n        query: term,\n      },\n    }),\n}\n\nexport const tvApi = {\n  topRated: () => api.get('tv/top_rated'),\n  popular: () => api.get('tv/popular'),\n  airingToday: () => api.get('tv/airing_today'),\n  tvDetail: (id) =>\n    api.get(`tv/${id}`, {\n      params: {\n        append_to_response: 'videos',\n      },\n    }),\n  search: (term) =>\n    api.get('search/tv', {\n      params: {\n        query: term,\n      },\n    }),\n}\n","import styled, { keyframes } from 'styled-components'\n\nconst Loaded = keyframes`\n  0% {\n    transform: rotate(0deg)\n  }\n\n  100% {\n    transform: rotate(360deg)\n  }\n\n`\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: calc(100vh - 50px);\n`\n\nconst Loading = styled.div`\n  position: relative;\n  border: 3px solid rgb(50, 50, 50);\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n`\n\nconst Svg = styled.svg`\n  position: absolute;\n  top: -4px;\n  left: -4px;\n  width: 60px;\n  height: 60px;\n  fill: transparent;\n  stroke: rgb(129, 107, 255);\n  stroke-width: 4px;\n  stroke-dasharray: calc(29 * 3.14);\n  transform: rotate(-90deg);\n  animation: 1s ${Loaded} infinite forwards;\n`\n\nconst Loader = () => (\n  <Container>\n    <Loading>\n      <Svg>\n        <circle cx=\"30\" cy=\"30\" r=\"29\"></circle>\n      </Svg>\n    </Loading>\n  </Container>\n)\n\nexport default Loader\n","import styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100vw;\n`\n\nconst Text = styled.span`\n  color: ${(props) => props.color};\n`\n\nconst Message = ({ text, color }) => (\n  <Container>\n    <Text color={color}>{text}</Text>\n  </Container>\n)\n\nMessage.propTypes = {\n  text: PropTypes.string.isRequired,\n  color: PropTypes.string.isRequired,\n}\n\nexport default Message\n","export default __webpack_public_path__ + \"static/media/noPosterSmall.ea2ad102.png\";","import { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport noPosterSmall from '../assets/noPosterSmall.png'\n\nconst Container = styled.div``\n\nconst Image = styled.div`\n  height: 180px;\n  background: url(${(props) => props.bgUrl}) no-repeat center / cover;\n  transition: opacity 0.3s ease-in-out;\n`\n\nconst Rating = styled.span`\n  position: absolute;\n  right: 5px;\n  bottom: 5px;\n  opacity: 0;\n`\n\nconst ImageContainer = styled.div`\n  position: relative;\n  margin-bottom: 15px;\n  &:hover {\n    ${Image} {\n      opacity: 0.3;\n    }\n    ${Rating} {\n      opacity: 1;\n    }\n  }\n`\n\nconst Title = styled.div`\n  margin-bottom: 5px;\n`\n\nconst Year = styled.span`\n  font-size: 8px;\n`\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => {\n  return (\n    <Link to={isMovie ? `/movie/${id}` : `/tv/${id}`}>\n      <Container>\n        <ImageContainer>\n          <Image\n            bgUrl={\n              imageUrl\n                ? `https://image.tmdb.org/t/p/w500${imageUrl}`\n                : noPosterSmall\n            }\n          />\n          <Rating>\n            <span role=\"img\" aria-label=\"rating\">\n              ⭐️\n            </span>\n            {rating}/10\n          </Rating>\n        </ImageContainer>\n        <Title>{title}</Title>\n        <Year>{year} </Year>\n      </Container>\n    </Link>\n  )\n}\n\nPoster.propTypes = {\n  id: PropTypes.number.isRequired,\n  imageUrl: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  rating: PropTypes.number,\n  year: PropTypes.string,\n  isMovie: PropTypes.bool,\n}\n\nexport default Poster\n","import styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst Container = styled.div`\n  :not(:last-child) {\n    margin-bottom: 50px;\n  }\n`\n\nconst Title = styled.span`\n  font-size: 14px;\n  font-weight: 600;\n`\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 125px);\n  margin-top: 25px;\n  grid-gap: 25px;\n`\n\nconst Section = ({ title, children }) => {\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <Grid>{children}</Grid>\n    </Container>\n  )\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n}\n\nexport default Section\n","import PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport styled from 'styled-components'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Poster from '../../components/Poster'\nimport Section from '../../components/Section'\n\nconst Container = styled.div`\n  padding: 20px;\n`\n\nconst HomePresenter = ({\n  movies: { nowPlaying, popular, upcoming },\n  loading,\n  error,\n}) => (\n  <>\n    <Helmet>\n      <title>Movies - 영화 제공 서비스 Nomflix</title>\n    </Helmet>\n\n    {loading ? (\n      <Loader />\n    ) : (\n      <Container>\n        {nowPlaying && nowPlaying.length > 0 && (\n          <Section title=\"Now Playing\">\n            {nowPlaying.map((movie) => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                year={movie.release_date && movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {popular && popular.length > 0 && (\n          <Section title=\"Popular Movies\">\n            {popular.map((movie) => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                year={movie.release_date && movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {upcoming && upcoming.length > 0 && (\n          <Section title=\"Upcoming Movies\">\n            {upcoming.map((movie) => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                year={movie.release_date && movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {error && <Message text={error} color=\"rgb(233, 30, 0)\" />}\n      </Container>\n    )}\n  </>\n)\n\nHomePresenter.propTyeps = {\n  movies: PropTypes.object,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n}\n\nexport default HomePresenter\n","import PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport styled from 'styled-components'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Poster from '../../components/Poster'\nimport Section from '../../components/Section'\n\nconst Container = styled.div`\n  padding: 20px;\n`\n\nconst TVPresenter = ({\n  TV: { topRated, popular, airingToday },\n  loading,\n  error,\n}) => (\n  <>\n    <Helmet>\n      <title>TV Shows - 영화 제공 서비스 NomFlix</title>\n    </Helmet>\n    {loading ? (\n      <Loader />\n    ) : (\n      <Container>\n        {topRated && topRated.length > 0 && (\n          <Section title=\"Top Rated Shows\">\n            {topRated.map((show) => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                title={show.name}\n                imageUrl={show.poster_path}\n                rating={show.vote_average}\n                year={\n                  show.first_air_date && show.first_air_date.substring(0, 4)\n                }\n              />\n            ))}\n          </Section>\n        )}\n        {popular && popular.length > 0 && (\n          <Section title=\"Popular Shows\">\n            {popular.map((show) => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                title={show.name}\n                imageUrl={show.poster_path}\n                rating={show.vote_average}\n                year={\n                  show.first_air_date && show.first_air_date.substring(0, 4)\n                }\n              />\n            ))}\n          </Section>\n        )}\n        {airingToday && airingToday.length > 0 && (\n          <Section title=\"Airing Today\">\n            {airingToday.map((show) => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                title={show.name}\n                imageUrl={show.poster_path}\n                rating={show.vote_average}\n                year={\n                  show.first_air_date && show.first_air_date.substring(0, 4)\n                }\n              />\n            ))}\n          </Section>\n        )}\n        {error && <Message text={error} color=\"rgb(233, 30, 0)\" />}\n      </Container>\n    )}\n  </>\n)\n\nTVPresenter.propTyeps = {\n  TV: PropTypes.object,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n}\n\nexport default TVPresenter\n","import PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport noPosterSmall from '../../assets/noPosterSmall.png'\nimport { Helmet } from 'react-helmet'\nimport { Link } from 'react-router-dom'\n\nconst Container = styled.div`\n  position: relative;\n  min-height: calc(100vh - 50px);\n  padding: 50px;\n`\n\nconst Backdrop = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  background: url(${(props) => props.bgImage}) no-repeat center / cover;\n  height: 100%;\n  &::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background: rgba(20, 20, 20, 0.7);\n  }\n`\n\nconst Content = styled.div`\n  position: relative;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n`\n\nconst Cover = styled.div`\n  width: 30%;\n  background: url(${(props) => props.bgImage}) no-repeat center / cover;\n`\n\nconst Data = styled.div`\n  width: 70%;\n  margin-left: 2.5rem;\n`\n\nconst ItemSection = styled.div`\n  margin: 1.5rem 0;\n`\n\nconst ItemContainer = styled.div`\n  margin: 1.25rem 0;\n`\n\nconst Item = styled.span``\n\nconst Divider = styled.span`\n  margin: 0 10px;\n`\n\nconst Overview = styled.p`\n  width: 50%;\n  opacity: 0.7;\n  line-height: 1.5;\n  font-size: 12px;\n  text-align: justify;\n`\n\nconst ItemSectionTitle = styled.h2`\n  margin-bottom: 1.25rem;\n  font-size: ${(props) => (props.fontSize ? props.fontSize : '2.5rem')};\n`\n\nconst VideoItemContainer = styled.div`\n  display: inline-flex;\n  max-width: 100%;\n  padding: 1.25rem;\n  background: rgba(255, 255, 255, 0.4);\n  overflow: scroll;\n`\n\nconst VideoItem = styled.div`\n  width: 300px;\n  & + div {\n    margin-left: 1.25rem;\n  }\n`\n\nconst ItemTabs = styled.div`\n  margin-bottom: 2rem;\n  font-size: 1rem;\n`\n\nconst ItemTab = styled(Link)`\n  padding: 0 0.5rem 0.5rem;\n  border-bottom: ${(props) =>\n    props.$current ? '4px solid rgb(129, 107, 255)' : 'transparent'};\n  color: ${(props) => (props.$current ? 'rgb(129, 107, 255)' : '#fff')};\n`\n\nconst ItemContent = styled.div`\n  & + div {\n    margin-left: 1.25rem;\n  }\n`\n\nconst Image = styled.div`\n  width: ${(props) => (props.width ? props.width : '250px')};\n  height: ${(props) => (props.height ? props.height : '350px')};\n  background: url(${(props) => props.bgImage}) no-repeat center / cover;\n  margin-bottom: 1rem;\n`\n\nconst DetailPresenter = ({ result, loading, error, id, pathname, url }) =>\n  loading ? (\n    <>\n      <Helmet>\n        <title>Loading - 영화 제공 서비스 Nomflix</title>\n      </Helmet>\n      <Loader />\n    </>\n  ) : (\n    <>\n      <Helmet>\n        <title>\n          {error\n            ? 'Not Found - 영화 제공 서비스 Nomflix'\n            : `${\n                result.title ? result.title : result.name\n              } - 영화 제공 서비스 Nomflix`}\n        </title>\n      </Helmet>\n      <Container>\n        {error ? (\n          <Message text={error} color=\"rgb(233, 30, 0)\" />\n        ) : (\n          result &&\n          Object.keys(result).length > 0 && (\n            <>\n              <Backdrop\n                bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\n              />\n\n              <Content>\n                <Cover\n                  bgImage={\n                    result.poster_path\n                      ? `https://image.tmdb.org/t/p/original${result.poster_path}`\n                      : noPosterSmall\n                  }\n                />\n                <Data>\n                  <ItemSectionTitle>\n                    {result.title ? result.title : result.name}\n                  </ItemSectionTitle>\n                  <ItemContainer>\n                    <Item>\n                      {result.release_date\n                        ? result.release_date.substring(0, 4)\n                        : result.first_air_date.substring(0, 4)}\n                    </Item>\n                    <Divider>•</Divider>\n                    <Item>\n                      {result.runtime\n                        ? result.runtime\n                        : result.episode_run_time}{' '}\n                      min\n                    </Item>\n                    <Divider>•</Divider>\n                    <Item>\n                      {result.genres.map((genre, index, genres) =>\n                        index === genres.length - 1\n                          ? genre.name\n                          : `${genre.name} / `\n                      )}\n                    </Item>\n                  </ItemContainer>\n                  <Overview>{result.overview}</Overview>\n                  {console.log(result)}\n\n                  {result.videos.results.length > 0 && (\n                    <ItemSection>\n                      <ItemSectionTitle fontSize=\"1.5rem\">\n                        Videos\n                      </ItemSectionTitle>\n                      <VideoItemContainer>\n                        {result.videos.results.map((video) => (\n                          <VideoItem key={video.id}>\n                            <iframe\n                              src={`https://www.youtube.com/embed/${video.key}`}\n                              title=\"YouTube video player\"\n                              frameBorder=\"0\"\n                              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                              allowFullScreen\n                            ></iframe>\n                            <p style={{ marginTop: '1rem', lineHeight: '1.5' }}>\n                              {video.name}\n                            </p>\n                          </VideoItem>\n                        ))}\n                      </VideoItemContainer>\n                    </ItemSection>\n                  )}\n\n                  <ItemSection>\n                    <ItemTabs>\n                      <ItemTab\n                        $current={\n                          `/tv/${id}` === pathname ||\n                          `/movie/${id}` === pathname\n                        }\n                        to={`${url}`}\n                      >\n                        시즌\n                      </ItemTab>\n                      <ItemTab\n                        $current={pathname === `${url}/company`}\n                        to={`${url}/company`}\n                      >\n                        제작사\n                      </ItemTab>\n                      <ItemTab\n                        $current={pathname === `${url}/countries`}\n                        to={`${url}/countries`}\n                      >\n                        제조국\n                      </ItemTab>\n                      <ItemTab\n                        $current={pathname === `${url}/creator`}\n                        to={`${url}/creator`}\n                      >\n                        제작자\n                      </ItemTab>\n                    </ItemTabs>\n\n                    {pathname === `${url}` &&\n                      result.seasons &&\n                      result.seasons.length > 0 && (\n                        <VideoItemContainer>\n                          {result.seasons.map((season) => (\n                            <ItemContent key={season.id}>\n                              <Image\n                                bgImage={\n                                  season.poster_path\n                                    ? `https://image.tmdb.org/t/p/original${season.poster_path}`\n                                    : noPosterSmall\n                                }\n                              ></Image>\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  justifyContent: 'space-between',\n                                  marginTop: '1rem',\n                                }}\n                              >\n                                <span>{season.name}</span>\n                                <span>{season.air_date}</span>\n                              </div>\n                            </ItemContent>\n                          ))}\n                        </VideoItemContainer>\n                      )}\n\n                    {pathname === `${url}/company` &&\n                      result.production_companies &&\n                      result.production_companies.length > 0 && (\n                        <VideoItemContainer style={{ alignItems: 'center' }}>\n                          {result.production_companies.map((companie) => (\n                            <ItemContent key={companie.id}>\n                              <img\n                                src={\n                                  companie.logo_path\n                                    ? `https://image.tmdb.org/t/p/w200/${companie.logo_path}`\n                                    : noPosterSmall\n                                }\n                                alt={companie.name}\n                              />\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  justifyContent: 'space-between',\n                                  marginTop: '1rem',\n                                }}\n                              >\n                                <span>{companie.name}</span>\n                              </div>\n                            </ItemContent>\n                          ))}\n                        </VideoItemContainer>\n                      )}\n\n                    {pathname === `${url}/countries` &&\n                      result.production_countries &&\n                      result.production_countries.length > 0 && (\n                        <VideoItemContainer>\n                          {result.production_countries.map((countrie, idx) => (\n                            <ItemContent key={idx}>\n                              <img\n                                src={\n                                  countrie.iso_3166_1\n                                    ? `https://www.countryflags.io/${countrie.iso_3166_1}/flat/64.png`\n                                    : noPosterSmall\n                                }\n                                alt={countrie.name}\n                              />\n\n                              <div\n                                style={{\n                                  display: 'flex',\n                                  justifyContent: 'space-between',\n                                  marginTop: '1rem',\n                                }}\n                              >\n                                <span>{countrie.name}</span>\n                              </div>\n                            </ItemContent>\n                          ))}\n                        </VideoItemContainer>\n                      )}\n\n                    {pathname === `${url}/creator` &&\n                      result.created_by &&\n                      result.created_by.length > 0 && (\n                        <VideoItemContainer>\n                          {result.created_by.map((created) => (\n                            <ItemContent key={created.id}>\n                              <Image\n                                width=\"150px\"\n                                height=\"150px\"\n                                bgImage={\n                                  created.profile_path\n                                    ? `https://image.tmdb.org/t/p/original${created.profile_path}`\n                                    : noPosterSmall\n                                }\n                              ></Image>\n                              <p>{created.name}</p>\n                            </ItemContent>\n                          ))}\n                        </VideoItemContainer>\n                      )}\n                  </ItemSection>\n                </Data>\n              </Content>\n            </>\n          )\n        )}\n      </Container>\n    </>\n  )\n\nDetailPresenter.propTypes = {\n  result: PropTypes.object,\n  loading: PropTypes.bool.isRequired,\n  match: PropTypes.object,\n  error: PropTypes.string,\n}\n\nexport default DetailPresenter\n","import PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport styled from 'styled-components'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Poster from '../../components/Poster'\nimport Section from '../../components/Section'\n\nconst Container = styled.div`\n  padding: 20px;\n`\n\nconst Form = styled.form`\n  width: 100%;\n  margin-bottom: 50px;\n`\n\nconst Input = styled.input`\n  all: unset;\n  width: 100%;\n  font-size: 28px;\n`\n\nconst SearchPresenter = ({\n  result: { movieResults, tvResults },\n  onSubmit,\n  onChange,\n  searchTerm,\n  loading,\n  error,\n}) => (\n  <Container>\n    <Helmet>\n      <title>Search - 영화 제공 서비스 NomFlix</title>\n    </Helmet>\n    <Form onSubmit={onSubmit}>\n      <Input\n        onChange={onChange}\n        placeholder=\"Search Movies or TV Shows...\"\n        value={searchTerm}\n      />\n    </Form>\n    {loading ? (\n      <Loader />\n    ) : (\n      <>\n        {movieResults && movieResults.length > 0 && (\n          <Section title=\"Movie Results\">\n            {movieResults.map((movie) => (\n              <Poster\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                year={movie.release_date && movie.release_date.substring(0, 4)}\n                isMovie={true}\n              />\n            ))}\n          </Section>\n        )}\n        {tvResults && tvResults.length > 0 && (\n          <Section title=\"Tv Show Results\">\n            {tvResults.map((show) => (\n              <Poster\n                key={show.id}\n                id={show.id}\n                title={show.name}\n                rating={show.vote_average}\n                imageUrl={show.poster_path}\n                year={\n                  show.first_air_date && show.first_air_date.substring(0, 4)\n                }\n              />\n            ))}\n          </Section>\n        )}\n        {error && <Message text={error} color=\"rgb(233, 30, 0)\" />}\n        {tvResults &&\n          movieResults &&\n          tvResults.length === 0 &&\n          movieResults.length === 0 && (\n            <Message text=\"Nothing Found\" color=\"rgb(255, 199, 100)\" />\n          )}\n      </>\n    )}\n  </Container>\n)\n\nSearchPresenter.propTypes = {\n  result: PropTypes.object,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n  searchTerm: PropTypes.string,\n}\n\nexport default SearchPresenter\n","import { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst Header = styled.header`\n  position: fixed;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 50px;\n  background-color: rgba(20, 20, 20, 0.8);\n  box-shadow: 0 1px 5px 2px rgba(0, 0, 0, 0.8);\n  color: white;\n  z-index: 10;\n`\n\nconst List = styled.ul`\n  display: flex;\n`\n\nconst Item = styled.li`\n  width: 80px;\n  height: 50px;\n  text-align: center;\n  color: ${(props) => (props.current ? 'rgb(127, 109, 255)' : '#fff')};\n  border-bottom: 4px solid\n    ${(props) => (props.current ? 'rgb(127, 109, 255)' : 'transparent')};\n  transition: border-bottom 0.5s ease-in-out;\n`\n\nconst SLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`\n\nexport default withRouter(({ location: { pathname } }) => (\n  <Header>\n    <List>\n      <Item current={pathname === '/'}>\n        <SLink to=\"/\">Movies</SLink>\n      </Item>\n      <Item current={pathname === '/tv'}>\n        <SLink to=\"/tv\">TV</SLink>\n      </Item>\n      <Item current={pathname === '/search'}>\n        <SLink to=\"/search\">Search</SLink>\n      </Item>\n    </List>\n  </Header>\n))\n","import { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\nimport Home from './Routes/Home'\nimport TV from './Routes/TV'\nimport Detail from './Routes/Detail'\nimport Search from './Routes/Search'\nimport Header from './components/Header'\n\nconst Router = () => (\n  <BrowserRouter>\n    <Header />\n    <div>안녕하세요 이페이지를 접수하겟습니다 지금부터 아름답게</div>\n    <div>안녕하세요 이페이지를 접수하겟습니다 지금부터 아름답게</div>\n    <div>안녕하세요 이페이지를 접수하겟습니다 지금부터 아름답게</div>\n    <Switch>\n      {/* <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/\"\n        exact\n        component={Home}\n      /> */}\n\n      {/* <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/tv\"\n        exact\n        component={TV}\n      />\n      <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/movie/:id\"\n        component={Detail}\n      />\n      <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/tv/:id\"\n        component={Detail}\n      />\n      <Route\n        path=\"https://jb-js.github.io/Nomflix_Second/search\"\n        component={Search}\n      />\n      <Redirect from=\"*\" to=\"/\" /> */}\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Router\n","import { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\n\nconst GlobalStyles = createGlobalStyle`\n    ${reset};\n\n    *,\n    *::after,\n    *::before {\n        box-sizing: border-box;\n    }\n\n    a {\n        text-decoration: none;\n        color: inherit;\n    }\n\n    body{\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size:12px;\n        background-color:rgba(20, 20, 20, 1);\n        color:white;\n        padding-top:50px;\n    }\n`\n\nexport default GlobalStyles\n","import Router from '../Router'\nimport GlobalStyles from './GlobalStyles'\n\nfunction App() {\n  return (\n    <>\n      <Router />\n      <GlobalStyles />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}